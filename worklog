#!/bin/zsh
#
SCRIPT_PATH="${0:A}"

LOG_FILE="${HOME}/.worklog.csv"
CURRENT_SESSION="${HOME}/.worklog_current"
CONFIG_FILE="${HOME}/.worklog_config"


if [[ ! -f "$CONFIG_FILE" ]]; then
	echo "ascii_art=Snoopy" > "$CONFIG_FILE"
fi

# Initialize the log file if it doesn't exist already
if [[ ! -f "$LOG_FILE" ]]; then
    echo "Date,Start,End,Duration,Task" > "$LOG_FILE"
fi


# Function to display the instructions for usage

usage() {
    cat << EOF
Task Logger:

$(preview_ascii)

Track the hours you spend working on things you find fun.

⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

Usage:
  worklog start [task description]  - Start a new work session
  worklog stop                      - Stop current work session
  worklog add <task>                - Add task to current session
  worklog status                    - Show current session status
  worklog today                     - Show today's logged hours
  worklog week                      - Show this week's logged hours
  worklog month                     - Show this month's logged hours
  worklog report [days]             - Show last N days (default: 7)
  worklog edit                      - Open log file in default editor
  worklog alias <alias name>        - Change the command to use worklog

  ASCII:
  worklog ascii show		    - Shows all ascii options
  worklog ascii set <option>	    - Change active ASCII art
  worklog ascii preview <option>    - Preview an ASCII art
  worklog ascii 		    - List ASCII and instructions


EOF
}

ascii_snoopy() {
	cat << 'EOF'
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⡿⠿⠛⠛⠛⠛⠛⠛⠛⠿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣠⣶⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣷⣞⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢠⣾⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠿⣦⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢠⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠛⠛⠿⠿⠿⢿⣷⣶⣶⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣰⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠻⣿⣦⡀⠀⠀⠀⠀⠀⠀
⠀⠀⣴⡿⠁⠀⠀⡀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣶⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣄⠀⠀⠀⠀⠀
⠀⣰⣿⠁⢀⣴⣆⢻⣮⣷⣄⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⡄⠀⠀⠀⠀
⠀⣿⡏⠀⣾⣿⣿⣷⣿⣿⣿⣷⡀⢸⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣇⠀⠀⠀⠀
⢸⣿⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⢿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠿⣷⣦⠀
⢸⣿⠇⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⢸⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣷⡎⣿⡇
⠘⣿⡄⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⢸⣿⠀⠀⠀⠀⠀⣰⡶⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣟⣷⡿⠃
⠀⢻⣷⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⡇⢸⣿⠀⠀⠀⠀⠀⠈⠷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⡾⠛⠉⠉⠉⠉⠀⠀
⠀⠀⢿⣷⡌⠻⣿⣿⣿⣿⣿⣿⠟⢀⣾⡇⠀⠀⠀⠀⠀⠀⠀⠙⠳⣤⣀⣀⠀⠀⠀⠀⠀⢀⣀⣠⣴⣶⠾⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠻⢿⣦⣈⠛⠛⠛⠋⣀⣤⣿⠟⠛⠿⠿⣶⣤⡀⠀⠀⠀⠀⠀⠀⣈⣭⡿⠿⠿⠛⠛⠋⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠙⠛⠿⠿⣾⠿⠟⠋⠁⠀⠀⠀⠀⠈⢻⣷⠀⠀⠀⠀⠀⣾⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣶⣿⣿⡿⠿⣿⣟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠋⠁⠀⠀⠀⠈⢿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡿⠀⠀⠀⠀⠀⠀⠀⢻⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⣻⣷⣶⣦⣄⠀⢠⣶⠿⢿⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡿⠀⠀⠀⢸⡀⠀⠀⢠⣾⡟⠁⠀⠀⠙⢷⡟⠀⠀⠀⠈⢻⣧⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⢸⣧⠀⠀⣾⡏⠀⠀⠰⠚⠛⠛⢿⣆⠀⠐⠋⠉⢻⣷⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⣿⡆⠀⣿⡇⠀⠀⠀⠀⣠⣤⣼⣿⣦⠀⠀⠴⠶⣿⣇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠿⠇⠀⠀⠀⠀⢸⣧⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠈⣿⣆⠀⠀⠀⠘⣿⡇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣯⠀⢀⡀⠀⠀⠀⢸⣿⠀⢻⣿⡀⠀⠀⠀⠀⠀⠀⠀⠹⣿⡄⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⠁⠸⣇⣠⣾⣯⣀⣘⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⢹⣧⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠙⠻⠿⠟⠛⠁⠈⠉⠙⠛⠃⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⢸⡏⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⠶⠶⢶⣶⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⢀⣿⡇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠐⣶⣴⣾⠟⠉⠀⠀⠀⢸⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⡶⠶⠿⠟⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠿⠿⠷⠶⠶⠿⠿⠿⠛⠛⠛⠻⠿⠿⠿⠿⢿⡿⠿⠿⠿⠶⠾⣿⣿⡿⠿⠿⠋⠀⠀

EOF
}

ascii_lain() {
	cat << 'EOF'

⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⣶⣿⠿⠛⠛⠛⠻⠿⣿⣿⣿⣿⣿⣶⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣷⣻⠶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠂⠀⢀⣠⣾⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⡿⣽⣻⣳⢎⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⢡⠂⠄⣢⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⡷⣯⡞⣝⢆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠁⡐⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣳⣟⡾⣹⢎⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠂⣼⣿⣿⣿⣿⡿⠿⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠛⠻⠿⣿⣿⣿⣿⣿⡿⣾⣝⣧⢻⡜⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢂⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠂⢸⣿⡿⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⠿⣿⣳⢯⣞⡳⣎⠅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠁⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠛⢯⡞⣵⣋⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠱⣍⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡄⢀⣾⡇⠀⣾⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠁⣾⣿⡇⢰⣿⣿⠀⠀⣆⠀⠀⠀⠀⢰⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⣼⡏⢰⣿⣿⠇⣾⣿⣿⡆⠀⣿⠀⠀⠀⠀⢸⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠰⠃⠀⠒⠛⠃⠚⠿⣿⢰⣿⣿⣿⡇⣤⣿⣤⣶⣦⣀⢼⣿⣧⠀⢰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢠⣶⢰⣿⣿⣿⣧⡹⢓⣾⣾⣿⣿⣿⣧⣿⣿⣿⣿⣋⣁⣀⣀⣀⣁⠘⠃⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣾⡟⢋⠁⡀⠀⠉⠙⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠱⣚⣭⡿⢿⣿⣷⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡄⢠⣆⠀⠀⠀⠀⣿⣏⡀⣾⠀⠀⠀⠀⣰⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⣁⠀⢠⠀⠀⠉⠻⢿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢇⣾⣿⣷⠀⠀⠀⣿⣿⣿⣞⡓⠥⠬⣒⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⠀⠀⠀⠀⠀⣦⠈⢳⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣾⣿⣿⣿⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⡢⢄⡀⠤⠾⢧⣦⣼⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⡇⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⣶⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢁⣿⣿⠇⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⢾⡅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠆⣼⣿⣿⣦⣾⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⢀⠰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣻⢿⣯⡿⣟⠇⠀⡜⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⢧⡟⡿⣾⡽⢏⣿⣾⣿⡌⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣛⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⡰⣣⢻⡜⣯⢳⡝⣼⣿⣿⣿⣿⣆⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⢂⠐⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢠⠎⡵⢣⢧⡹⣜⢣⣿⣿⣿⣿⣿⣿⣿⣷⡌⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⢀⠂⠔⡀⢂⠐⡀⢂⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠡⢚⠴⣉⠦⡑⢎⢣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⡩⠂⠀⠀⠀⠀⠀⣀⡔⢦⠃⢈⠐⡀⢂⠐⠠⠀⠄⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠁⠎⡰⢡⠙⡌⣸⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠟⠒⠌⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠀⠈⠀⠀⠀⠀⠀⣀⠶⡱⢎⢧⢋⠀⡐⢀⠂⠌⢀⠂⢀⠂⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠢⠑⡨⣟⠿⠟⠟⠋⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠟⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢴⡩⢞⡱⢫⠜⡪⢅⠀⠂⠄⠂⠠⠀⠂⢀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢢⡙⢦⡙⡔⢣⠈⢀⠂⠈⡀⠐⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠂⠴⢉⠆⡁⠀⡀⠁⢀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠐⠡⠀⠀⠐⠀⠀⠀⠈⠀

EOF
}

get_current_ascii() {
	grep "ascii_art=" "$CONFIG_FILE" | cut -d'=' -f2
}

ascii_art_options() {
	echo "Ascii options:"
	echo ""
	echo "Snoopy"
	echo "Lain"
	echo "None"
	echo ""
	echo "Current setting: $(grep "ascii_art=" "$CONFIG_FILE" | cut -d'=' -f2)"
	echo ""
	echo "To change ascii art: worklog ascii set <option>"
	echo "To preview ascii: worklog ascii preview <option>"
}


# Set ASCII art preference
set_ascii() {
	local option="$1"
	case "$option" in
		Snoopy|Lain|None)
			sed -i.bak "s/ascii_art=.*/ascii_art=$option/" "$CONFIG_FILE"
			echo "✅ ASCII art set to: $option"
			if [[ "$option" != "None" ]]; then
				echo ""
				preview_ascii "$option"
			fi
			;;
		*)
			echo "⚠️  Invalid option. Choose: Snoopy, Lain, or None"
			;;
	esac
}



preview_ascii() {
	local option="${1:-$(get_current_ascii)}"
	case "$option" in
		Snoopy) ascii_snoopy ;;
		Lain) ascii_lain ;;
		None) ;;
		*) echo "invalid option" ;;
	esac
}


change_alias() {
	local alias_name="$1"

	if [[ -z "$alias_name" ]]; then
		echo "Provide an alias name"
		echo "'worklog alias <alias>' (e.g. wk)"
		return 1
	fi

	local script_path="$SCRIPT_PATH"

	local alias_line="alias ${alias_name}='${script_path}'"

	if [[ -f "${HOME}/.zshrc" ]] && grep -q "alias ${alias_name}=" "${HOME}/.zshrc"; then
        echo "⚠️  Alias '${alias_name}' already exists in ~/.zshrc"
        echo ""
        echo "Current definition:"
        grep "alias ${alias_name}=" "${HOME}/.zshrc"
        echo ""
        read -q "REPLY?Overwrite it? (y/n) "
        echo ""
        if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
            echo "Cancelled."
            return 1
        fi
        # Remove old alias
        sed -i.bak "/alias ${alias_name}=/d" "${HOME}/.zshrc"
    fi

    # Add alias to .zshrc
    echo "" >> "${HOME}/.zshrc"
    echo "# Worklog alias created $(date +%Y-%m-%d)" >> "${HOME}/.zshrc"
    echo "$alias_line" >> "${HOME}/.zshrc"
    
    echo "✅ Alias created successfully!"
    echo ""
    echo "Added to ~/.zshrc:"
    echo "  $alias_line"
    echo ""
    echo "To use immediately, run:"
    echo "  source ~/.zshrc"
    echo ""
    echo "Or restart your terminal. Then you can use:"
    echo "  ${alias_name} start    # instead of worklog start"
    echo "  ${alias_name} stop     # instead of worklog stop"
    echo "  etc..."
}

# Start a session
start_session() {
    if [[ -f "$CURRENT_SESSION" ]]; then
        echo "⚠️  A work session is already active!"
        echo "Use 'worklog stop' to end it first."
        return 1
    fi
    
    local task="$*"
    if [[ -z "$task" ]]; then
        task="Work session"
    fi
    
    local start_time=$(date +%s)
    echo "$start_time|$task" > "$CURRENT_SESSION"
    echo "✅ Work session started at $(date +%H:%M)"
    echo "📝 Task: $task"
}

# Stop current session
stop_session() {
    if [[ ! -f "$CURRENT_SESSION" ]]; then
        echo "⚠️  No active work session found."
        return 1
    fi
    
    local session_data=$(<"$CURRENT_SESSION")
    local start_time=$(echo "$session_data" | cut -d'|' -f1)
    local task=$(echo "$session_data" | cut -d'|' -f2-)
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    # Convert to hours and mins
    local hours=$((duration / 3600))
    local minutes=$(((duration % 3600) / 60))
    local duration_str=$(printf "%d:%02d" $hours $minutes)
    
    # Log to the CSV file in home directory
    local date_str=$(date -r $start_time +%Y-%m-%d)
    local start_str=$(date -r $start_time +%H:%M)
    local end_str=$(date +%H:%M)
    
    echo "$date_str,$start_str,$end_str,$duration_str,\"$task\"" >> "$LOG_FILE"
    
    rm "$CURRENT_SESSION"
    
    echo "⏹️  Work session stopped at $end_str"
    echo "⏱️  Duration: $duration_str"
    echo "📝 Task: $task"
}

# Add a task to current session
add_task() {
    if [[ ! -f "$CURRENT_SESSION" ]]; then
        echo "⚠️  No active work session. Start one with 'worklog start'"
        return 1
    fi
    
    local new_task="$*"
    if [[ -z "$new_task" ]]; then
        echo "⚠️ Please provide a task description"
        return 1
    fi
    
    local session_data=$(<"$CURRENT_SESSION")
    local start_time=$(echo "$session_data" | cut -d'|' -f1)
    local old_task=$(echo "$session_data" | cut -d'|' -f2-)
    
    echo "$start_time|$old_task + $new_task" > "$CURRENT_SESSION"
    echo "✅ Task added: $new_task"
}

# Show the current session status
show_status() {
    if [[ ! -f "$CURRENT_SESSION" ]]; then
        echo "No active work session."
        return
    fi
    
    local session_data=$(<"$CURRENT_SESSION")
    local start_time=$(echo "$session_data" | cut -d'|' -f1)
    local task=$(echo "$session_data" | cut -d'|' -f2-)
    local current_time=$(date +%s)
    local duration=$((current_time - start_time))
    
    local hours=$((duration / 3600))
    local minutes=$(((duration % 3600) / 60))
    
    echo "🟢 Active work session"
    echo "Started: $(date -r $start_time +%H:%M)"
    echo "Duration: ${hours}h ${minutes}m"
    echo "Task: $task"
}

# Show a report for a date range specified
show_report() {
    local days=${1:-7}
    local cutoff_date=$(date -v-${days}d +%Y-%m-%d)
    
    echo "Work Log Report (Last $days days)"
    echo "=================================="
    
    tail -n +2 "$LOG_FILE" | while IFS=, read -r date start end duration task; do
        if [[ "$date" > "$cutoff_date" ]] || [[ "$date" == "$cutoff_date" ]]; then
            task=$(echo "$task" | sed 's/^"//;s/"$//')
            printf "%s  %s-%s  %7s  %s\n" "$date" "$start" "$end" "$duration" "$task"
        fi
    done
    
    # Calculate total hours 
    local total_minutes=0
    while IFS=, read -r date start end duration task; do
    if [[ "$date" > "$cutoff_date" ]] || [[ "$date" == "$cutoff_date" ]]; then
        local h=$(echo "$duration" | cut -d: -f1)
        local m=$(echo "$duration" | cut -d: -f2)
        total_minutes=$((total_minutes + h * 60 + m))
    fi
done < <(tail -n +2 "$LOG_FILE")
    echo ""
    echo "Total: $((total_minutes / 60))h $((total_minutes % 60))m"
}

# Main commands 
case "${1:-}" in
    start|begin)
        shift
        start_session "$@"
        ;;
    stop|end)
        stop_session
        ;;
    add)
        shift
        add_task "$@"
        ;;
    status)
        show_status
        ;;
    today|day)
        show_report 0
        ;;
    week)
        show_report 7
        ;;
    month)
        show_report 30
        ;;
    report)
        show_report "${2:-7}"
        ;;
    edit)
        ${EDITOR:-nvim} "$LOG_FILE"
        ;;
ascii)
	case "${2:-}" in
		set)
			set_ascii "$3"
			;;
		preview)
			preview_ascii "$3"
			;;
		*)
			ascii_art_options
			;;
	esac
	;;
alias) 
	change_alias "$2"
	;;
    *)
        usage
        ;;
esac
